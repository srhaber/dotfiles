'use strict';

var ComponentDef = require('./ComponentDef');
var componentsUtil = require('./util');
var isServer = componentsUtil._w_ === true;

var EMPTY_OBJECT = {};

function GlobalComponentsContext(out) {
    this.s_ = [];
    this.n_ = EMPTY_OBJECT;
    this.o_ = EMPTY_OBJECT;
    this.f_ = {};
    this.q_ = out;
    this.Y_ = undefined;
    this._x_ = null;
    this._t_ = componentsUtil._y_(out);
}

GlobalComponentsContext.prototype = {
    _z_: function (doc) {
        var topLevelComponentDefs = null;

        this.s_.forEach(function (root) {
            var children = root._l_;
            if (children) {
                // NOTE: ComponentsContext.___initClientRendered is provided by
                //       index-browser.js to avoid a circular dependency
                ComponentsContext._A_(children, doc);
                if (topLevelComponentDefs === null) {
                    topLevelComponentDefs = children;
                } else {
                    topLevelComponentDefs = topLevelComponentDefs.concat(children);
                }
            }
        });

        this.s_ = null;

        // Reset things stored in global since global is retained for
        // future renders
        this.q_.global._B_ = undefined;

        return topLevelComponentDefs;
    },
    _C_: function (elId, bodyOnly) {
        var preserved = bodyOnly === true ? this.o_ : this.n_;
        if (preserved === EMPTY_OBJECT) {
            if (bodyOnly === true) {
                preserved = this.o_ = {};
            } else {
                preserved = this.n_ = {};
            }
        }
        preserved[elId] = true;
    },
    _s_: function (parentId, id) {
        var nextIdLookup = this._x_ || (this._x_ = {});

        var indexLookupKey = parentId + '-' + id;
        var currentIndex = nextIdLookup[indexLookupKey];
        if (currentIndex == null) {
            currentIndex = nextIdLookup[indexLookupKey] = 0;
        } else {
            currentIndex = ++nextIdLookup[indexLookupKey];
        }

        return indexLookupKey.slice(0, -2) + '[' + currentIndex + ']';
    }
};

function ComponentsContext(out, parentComponentsContext, shouldAddGlobalRoot) {
    var root;

    var globalComponentsContext;

    if (parentComponentsContext === undefined) {
        globalComponentsContext = out.global._B_;
        if (globalComponentsContext === undefined) {
            out.global._B_ = globalComponentsContext = new GlobalComponentsContext(out);
        }

        root = new ComponentDef(null, null, globalComponentsContext);

        if (shouldAddGlobalRoot !== false) {
            globalComponentsContext.s_.push(root);
        }
    } else {
        globalComponentsContext = parentComponentsContext.X_;
        var parentComponentStack = parentComponentsContext._j_;
        root = parentComponentStack[parentComponentStack.length - 1];
    }

    this.X_ = globalComponentsContext;
    this.q_ = out;
    this._j_ = [root];
}

ComponentsContext.prototype = {
    _D_: function (nestedOut) {
        return new ComponentsContext(nestedOut, this);
    },
    _E_: function (component, isSplitComponent) {
        var componentStack = this._j_;
        var origLength = componentStack.length;
        var parentComponentDef = componentStack[origLength - 1];

        var componentId = component.id;

        var componentDef = new ComponentDef(component, componentId, this.X_, componentStack, origLength);
        if (isServer) {
            // On the server
            if (parentComponentDef._o_ === true) {
                componentDef._o_ = true;
            } else {
                parentComponentDef._r_(componentDef);
                if (isSplitComponent === false && this.q_.global.noBrowserRerender !== true) {
                    componentDef._o_ = true;
                }
            }
        } else {
            parentComponentDef._r_(componentDef);
            this.X_.f_[componentId] = componentDef;
        }

        componentStack.push(componentDef);

        return componentDef;
    },

    _t_: function () {
        var componentStack = this._j_;
        var parentComponentDef = componentStack[componentStack.length - 1];
        return parentComponentDef._t_();
    }
};

function getComponentsContext(out) {
    return out.data._B_ || (out.data._B_ = new ComponentsContext(out));
}

module.exports = exports = ComponentsContext;

exports.__ = getComponentsContext;